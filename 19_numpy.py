import numpy as np  # 넘파이 모듈을 부르고 별칭(np) 설정

arr = np.array([1, 2, 3, 4, 5])
print(arr)
print("=====================================")

print(np.__version__)  # 버전 확인
print("=====================================")

print(type(arr))  # 객체 타입 확인
'''
Numerical Python → Numpy
◾ 배열을 다루는데 사용
◾ 3가지 분류 👉 기초, 무작위, 우펑
◾ 선형대수, 푸리에 변환, 행렬
◾ list와 다르게 메무리의 한 연속된 위치에 저장
◾ 최신 cpu 아키텍처에 최적화
◾ 설치 명령어: pip install numpy
◾ 별칭 사용
'''
print("=====================================")

# 배열 생성
# 0차원 배열: 값이 42인 0차원 배열 생성
arr = np.array(42)
print(arr)
print("=====================================")

# 1차원 배열
arr = np.array([1, 2, 3])
print(arr)
print("=====================================")

# 2차원 배열
arr = np.array([[1, 2, 3], [4, 5, 6]])
print(arr)
print("=====================================")

# 3차원 배열: 행렬을 요소로 갖는 배열 (숫자를 직사각형 형태로 배열)
arr = np.array([[[1, 2, 3], [4, 5, 6], [7, 8, 9]]])
print(arr)
'''
행렬 사용 분야
◾ 선형방정식(연립방정식)
◾ 컴퓨터 그래픽스
◾ 데이터과학 & 머신러닝
◾ 물리학
◾ 암호화

행렬로 할 수 있는 연산
◾ 덧셈, 뺄셈, 전치, 역행렬, 행렬식
'''
print("=====================================")

# 고차원 배열
arr = np.array([1, 2, 3, 4], ndmin=5)
print(arr)
print('몇 차원 배열?:', arr.ndim)
'''
◾ 현실 세계의 데이터 구조와 유사
◾ 빠른 계산 및 접근
◾ 중첩된 코드를 간결하게 사용
◾ 복잡한 연산 가능하게 하기 위함
'''
print("=====================================")

# 배열 인덱싱: 요소 엑세스
arr = np.array([1, 2, 3])
print(arr[0], arr[1], arr[2])  # 0부터 시작
print("=====================================")

# 2차원 배열 인덱싱
arr = np.array([[1, 2, 3], [4, 5, 6]])
print(arr[0, 1])  # 첫번째 배열 두번째
print(arr[1, 2])  # 두번째 배열 세번째
print("=====================================")

# 3차원 배열 인덱싱
arr = np.array([[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]])
print(arr[0, 1, 2])  # 첫번째 배열 두번째의 세번째
print("=====================================")

# 음수 인덱싱: 마지막부터 접근
arr = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])
print('음수인덱싱(오른쪽부터 접근):', arr[1, -1])
